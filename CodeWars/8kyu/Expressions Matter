//Task

// Given three integers a ,b ,c, return the largest number obtained after inserting the following operators and brackets: +, *, ()
// In other words , try every combination of a,b,c with [*+()] , and return the Maximum Obtained (Read the notes for more detail about it)
// Example

// With the numbers are 1, 2 and 3 , here are some ways of placing signs and brackets:

// 1 * (2 + 3) = 5
// 1 * 2 * 3 = 6
// 1 + 2 * 3 = 7
// (1 + 2) * 3 = 9
// So the maximum value that you can obtain is 9.

// Notes

// The numbers are always positive.
// The numbers are in the range (1  ≤  a, b, c  ≤  10).
// You can use the same operation more than once.
// It's not necessary to place all the signs and brackets.
// Repetition in numbers may occur .
// You cannot swap the operands. For instance, in the given example you cannot get expression (1 + 3) * 2 = 8.




function expressionMatter(a, b, c) {
  
  let res1 = a * b * c;
  let res2 = a * (b + c);
  let res3 = a + b * c;
  let res4 = (a + b) * c;
  let res5 = a + b + c;
  
  
  if ((res1 >= res2) && (res1 >= res3) && (res1 >= res4) && (res1 >= res5)) {
    return res1;
  }
  else if((res2 >= res1) && (res2 >= res3) && (res2 >= res4) && (res2 >= res5)) {
    return res2;
  }
  else if ((res3 >= res1) && (res3 >= res2) && (res3 >= res4) && (res3 >= res5)) {
    return res3;
  }
  else if ((res4 >= res1) && (res4 >= res2) && (res4 >= res3) && (res4 >= res5)) {
    return res4;
  }
  else if ((res5 >= res1) && (res5 >= res2) && (res5 >= res3) && (res5 >= res4)) {
    return res5;
  }
}




